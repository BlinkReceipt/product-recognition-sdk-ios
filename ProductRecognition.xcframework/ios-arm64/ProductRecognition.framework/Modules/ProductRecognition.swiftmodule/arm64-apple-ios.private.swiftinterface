// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ProductRecognition
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import CoreMotion
import Foundation
@_exported import ProductRecognition
import Security
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import simd
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ResultListView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var cardHiddenHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var cardShownHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var didSelectPromo: ((ProductRecognition.Promo) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var didTapCard: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var draggingCard: ((UIKit.UIPanGestureRecognizer) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isShown: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var products: [ProductRecognition.ProductInfo] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var summaryText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cardHandleBar: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var cardView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var summaryLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadList(of products: [ProductRecognition.ProductInfo])
  @objc deinit
}
extension ProductRecognition.ResultListView : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
public struct ProductInfo {
  public let order: Swift.Int
  public let productData: ProductRecognition.Products.StaticDiscovery.Response.Product
  public let promotions: [ProductRecognition.Products.StaticDiscovery.Response.PromotionDisplay]?
  public var hasPromotion: Swift.Bool {
    get
  }
}
public class DetectionResult {
  final public let id: Swift.UInt
  final public let typeOfDetection: Swift.Int
  final public let score: Swift.Float
  final public let left: CoreFoundation.CGFloat
  final public let right: CoreFoundation.CGFloat
  final public let top: CoreFoundation.CGFloat
  final public let bottom: CoreFoundation.CGFloat
  public init(id: Swift.UInt, typeOfDetection: Swift.Int, score: Swift.Float, left: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
  public var width: CoreFoundation.CGFloat {
    get
    set
  }
  public var height: CoreFoundation.CGFloat {
    get
    set
  }
  public var center: CoreFoundation.CGPoint {
    get
    set
  }
  public var rect: CoreFoundation.CGRect {
    get
    set
  }
  @objc deinit
}
public struct ResultIndicatorConfiguration {
  public static var shared: ProductRecognition.ResultIndicatorConfiguration
  public var contentBackgroundColor: UIKit.UIColor
  public var selectedProductBackgroundColor: UIKit.UIColor
  public var productIcon: UIKit.UIImage?
  public var selectedProductIcon: UIKit.UIImage?
  public var promotionIcon: UIKit.UIImage?
  public var selectedPromotionIcon: UIKit.UIImage?
  public var iconTintColor: UIKit.UIColor
  public var selectedIconTintColor: UIKit.UIColor
  public var pulseAnimationDuration: CoreFoundation.CGFloat
  public var pulseTintColor: UIKit.UIColor
  public var resizeAnimationDuration: CoreFoundation.CGFloat
  public var badgeBackgroundColor: UIKit.UIColor
  public var badgeFont: UIKit.UIFont?
  public var badgeTextColor: UIKit.UIColor
  public var badgeSize: CoreFoundation.CGSize
  public var selectedTextFont: UIKit.UIFont?
  public var selectedTextColor: UIKit.UIColor
  public init()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GradientBackgroundView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SinglePhotoVC : UIKit.UIViewController, AVFoundation.AVCapturePhotoCaptureDelegate, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) open var capturedImageURL: Foundation.URL? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var captureRegion: CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open var didCaptureImage: ((UIKit.UIImage, Foundation.URL?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var didReceiveResults: (([ProductRecognition.ProductInfo], Foundation.URL?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var shouldPresentResults: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shouldScanCapturedImage: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shouldShowPromotions: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shutterButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) @objc open func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willBeginCaptureFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) @objc open func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc open func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) open func clearAllCapturedImagesFromDisk(okTitle: Swift.String?, okMesssage: Swift.String?, failedTitle: Swift.String?, failedMessage: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func startCaptureSession()
  @_Concurrency.MainActor(unsafe) open func stopCaptureSession()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ProductRecognition.SinglePhotoVC : ProductRecognition.StabilityDelegate {
  @_Concurrency.MainActor(unsafe) public func stabilityDelegate(isMoving: Swift.Bool)
}
public struct ResultBannerConfiguration {
  public static var shared: ProductRecognition.ResultBannerConfiguration
  public var contentBackgroundColor: UIKit.UIColor
  public var highlightedBackgroundColor: UIKit.UIColor
  public var highlightedFont: UIKit.UIFont?
  public var highlightedTextColor: UIKit.UIColor
  public var photoContentMode: UIKit.UIView.ContentMode
  public var tagBackgroundColor: UIKit.UIColor
  public var tagImage: UIKit.UIImage?
  public var tagTintColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont?
  public var titleTextColor: UIKit.UIColor
  public var subtitleFont: UIKit.UIFont?
  public var subtitleTextColor: UIKit.UIColor
  public var detailFont: UIKit.UIFont?
  public var detailTextColor: UIKit.UIColor
  public var scrollViewHorizontalGap: CoreFoundation.CGFloat
  public var scrollViewHorizontalInset: CoreFoundation.CGFloat
  public init()
}
@_hasMissingDesignatedInitializers final public class AuthManager {
  public static let shared: ProductRecognition.AuthManager
  final public func loadAuthTokenForCurrentDevice(licenseKey: Swift.String, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ResultBanner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static let bannerHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var didTapBanner: ((ProductRecognition.Promo?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var promo: ProductRecognition.Promo? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var product: ProductRecognition.ProductInfo? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadProduct(_ product: ProductRecognition.ProductInfo, withPromotionAtIndex index: Swift.Int? = nil)
  @objc deinit
}
public struct ResultDetailsConfiguration {
  public static var shared: ProductRecognition.ResultDetailsConfiguration
  public var cardBackgroundColor: UIKit.UIColor
  public var detailBorderColor: UIKit.UIColor
  public var detailHeaderIcon: UIKit.UIImage?
  public var detailHeaderIconTintColor: UIKit.UIColor
  public var detailHeaderFont: UIKit.UIFont?
  public var detailHeaderText: Swift.String
  public var detailHeaderTextColor: UIKit.UIColor
  public var mainDetailFont: UIKit.UIFont
  public var mainDetailTextColor: UIKit.UIColor
  public var limitationDetailFont: UIKit.UIFont
  public var limitationDetailTextColor: UIKit.UIColor
  public var dismissButtonImage: UIKit.UIImage?
  public var dismissButtonSize: CoreFoundation.CGSize
  public var dismissButtonTintColor: UIKit.UIColor
  public var highlightedBackgroundColor: UIKit.UIColor
  public var highlightedFont: UIKit.UIFont?
  public var highlightedTextColor: UIKit.UIColor
  public var photoContentMode: UIKit.UIView.ContentMode
  public var tagBackgroundColor: UIKit.UIColor
  public var tagImage: UIKit.UIImage?
  public var tagTintColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont?
  public var titleTextColor: UIKit.UIColor
  public init()
}
public protocol StabilityDelegate : AnyObject {
  func stabilityDelegate(isMoving: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ScanAgainButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var borderView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var label: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public struct ResultListConfiguration {
  public static var shared: ProductRecognition.ResultListConfiguration
  public var cardBackgroundColor: UIKit.UIColor
  public var cardHandleBarColor: UIKit.UIColor
  public var summaryFont: UIKit.UIFont
  public var summaryTextColor: UIKit.UIColor
  public var headerHeight: CoreFoundation.CGFloat
  public var headerFont: UIKit.UIFont
  public var headerTextColor: UIKit.UIColor
  public var headerPromotionsText: Swift.String
  public var headerProductsText: Swift.String
  public init()
}
public class FeaturesExtractor {
  weak public var delegate: ProductRecognition.FeaturesExtractorDelegate?
  public init(arSession: ARKit.ARSession, timeInterval: Foundation.TimeInterval)
  @objc deinit
}
public protocol FeaturesExtractorDelegate : AnyObject {
  func featuresExtractor(frame: ARKit.ARFrame, features: ProductRecognition.Features)
  func featuresExtractor(lastProcessingTime: Swift.UInt64)
}
extension ProductRecognition.Products {
  public struct StaticDiscovery {
    public struct Response : Swift.Decodable {
      public struct Product : Swift.Decodable {
        public init(from decoder: Swift.Decoder) throws
      }
      public struct PromotionDisplay : Swift.Decodable {
        public init(from decoder: Swift.Decoder) throws
      }
      public init(from decoder: Swift.Decoder) throws
    }
  }
}
public struct ResultListCellConfiguration {
  public static var shared: ProductRecognition.ResultListCellConfiguration
  public var contentBackgroundColor: UIKit.UIColor
  public var borderCornerRadius: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var promotionBorderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var highlightedBackgroundColor: UIKit.UIColor
  public var highlightedFont: UIKit.UIFont?
  public var highlightedTextColor: UIKit.UIColor
  public var photoContentMode: UIKit.UIView.ContentMode
  public var tagBackgroundColor: UIKit.UIColor
  public var tagImage: UIKit.UIImage?
  public var tagTintColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont?
  public var titleTextColor: UIKit.UIColor
  public var subtitleFont: UIKit.UIFont?
  public var subtitleTextColor: UIKit.UIColor
  public var detailFont: UIKit.UIFont?
  public var detailTextColor: UIKit.UIColor
  public init()
}
@_hasMissingDesignatedInitializers public class StaticDiscoveryManager {
  public static let shared: ProductRecognition.StaticDiscoveryManager
  public var didReceiveIndexedProducts: (([(Swift.Int64, ProductRecognition.ProductInfo)]) -> Swift.Void)?
  public func scanImageForProducts(_ image: UIKit.UIImage, withPromotions: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ResultVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var detectedProducts: [ProductRecognition.ProductInfo] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var willDismiss: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var capturedImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var resultBannerView: ProductRecognition.ResultBannerScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var resultCardView: ProductRecognition.ResultListView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scanAgainButton: ProductRecognition.ScanAgainButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadReceivedIndexedProducts(_ indexToProductInfo: [(Swift.Int64, ProductRecognition.ProductInfo)], withPromotions: Swift.Bool = true, shouldPresent: @escaping (_ shouldPresent: Swift.Bool, _ viewController: ProductRecognition.ResultVC) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ResultDetailsVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var didDismiss: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var promo: ProductRecognition.Promo? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cardView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dismissButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailHeaderIconView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var detailHeaderLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var detailHeaderView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var photoView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadPromoDetails(of promotion: ProductRecognition.Promo?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ResultBannerScrollView : UIKit.UIView, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) public var banners: [ProductRecognition.ResultBanner] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var didTapBanner: ((ProductRecognition.Promo?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var didChangeCurrentPage: ((Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var horizontalGap: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var horizontalViewInset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var pageControl: UIKit.UIPageControl {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadResultBanners(for resultIndicator: ProductRecognition.ResultIndicator?)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
public struct Products {
  public struct Request : Swift.Encodable {
    public var uid: Swift.String
    public var apiToken: Swift.String
    public var countryIsoAlpha2Code: Swift.String
    public var store: ProductRecognition.Products.Request.Store
    public var products: [ProductRecognition.Products.Request.Product]
    public var features: ProductRecognition.Products.Request.Features
    public struct Store : Swift.Encodable {
      public var bannerId: Swift.Int
      public var merchantName: Swift.String
      public var storeLocationId: Swift.Int
      public var state: Swift.String
      public var zipCode: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
    }
    public struct Product : Swift.Encodable {
      public var order: Swift.Int
      public var productIntelData: ProductRecognition.Products.Request.Product.ProductIntelData?
      public var imageBase64Encoded: Swift.String?
      public var embedding: [Swift.Float]?
      public init(order: Swift.Int, productIntelData: ProductRecognition.Products.Request.Product.ProductIntelData? = nil, imageBase64Encoded: Swift.String? = nil, embedding: [Swift.Float]? = nil)
      public struct ProductIntelData : Swift.Encodable {
        public var upc: Swift.String
        public func encode(to encoder: Swift.Encoder) throws
      }
      public func encode(to encoder: Swift.Encoder) throws
    }
    public struct Features : Swift.Encodable {
      public var dietary: Swift.Bool
      public var recommendations: Swift.Bool
      public var ratings: Swift.Bool
      public var promotions: Swift.Bool
      public var reviews: Swift.Bool
      public func encode(to encoder: Swift.Encoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Response : Swift.Decodable {
    public var success: Swift.Bool?
    public var products: [ProductRecognition.Products.Response.Product]?
    public var promotions: ProductRecognition.Products.Response.Promotions?
    public init(success: Swift.Bool? = nil, products: [ProductRecognition.Products.Response.Product]? = nil, promotions: ProductRecognition.Products.Response.Promotions? = nil)
    public struct Product : Swift.Decodable {
      public var order: Swift.Int
      public var upc: Swift.String?
      public var productName: Swift.String?
      public var brand: Swift.String?
      public var size: Swift.String?
      public var imageUrl: Swift.String?
      public var sector: Swift.String?
      public var department: Swift.String?
      public var majorCategory: Swift.String?
      public var discovery: ProductRecognition.Products.Response.Discovery?
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Discovery : Swift.Decodable {
      public var dietary: ProductRecognition.Products.Response.Dietary?
      public var reviews: ProductRecognition.Products.Response.Reviews?
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Dietary : Swift.Decodable {
      public var barcodes: [Swift.String]?
      public var dietaryTags: [Swift.String]?
      public var allergenTags: [Swift.String]?
      public var ingredients: [Swift.String]?
      public var nutrition: [ProductRecognition.Products.Response.Nutrition]?
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Nutrition : Swift.Decodable {
      public var name: Swift.String?
      public var amount: Swift.String?
      public var measurement: Swift.String?
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Reviews : Swift.Decodable {
      public var totalAverageRatings: Swift.Float?
      public var topReviews: [ProductRecognition.Products.Response.Review]?
      public var recentReviews: [ProductRecognition.Products.Response.Review]?
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Review : Swift.Decodable {
      public var date: Swift.String?
      public var name: Swift.String?
      public var title: Swift.String?
      public var description: Swift.String?
      public var rating: Swift.Float?
      public static let minRating: Swift.Int
      public static let maxRating: Swift.Int
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Promotions : Swift.Decodable {
      public var targetedPromotions: [ProductRecognition.Products.Response.Promotion]?
      public var untargetedPromotions: [ProductRecognition.Products.Response.Promotion]?
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Promotion : Swift.Decodable {
      public var promotionDisplay: ProductRecognition.Products.Response.PromotionDisplay?
      public var qualifiedProductIndices: [Swift.Int]
      public init(from decoder: Swift.Decoder) throws
    }
    public struct PromotionDisplay : Swift.Decodable {
      public var headline: Swift.String?
      public var description: Swift.String?
      public var limitationDetails: Swift.String?
      public var bannerText: Swift.String?
      public init(from decoder: Swift.Decoder) throws
    }
    public init(from decoder: Swift.Decoder) throws
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ResultIndicator : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var didSelectResultIndicator: ((ProductRecognition.ResultIndicator) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var product: ProductRecognition.ProductInfo? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var promos: [ProductRecognition.Promo] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var badgeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var badgeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var badgeView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageBackgroundView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var pulseView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedTextLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public struct SDKConfiguration {
  public static var shared: ProductRecognition.SDKConfiguration
  public var singlePhotoBoundingBoxesToShow: ProductRecognition.SDKConfiguration.SinglePhotoBoundingBoxesToShow
  public var shouldShowDebugData: Swift.Bool
  public var shouldShowPromotions: Swift.Bool
  public var shouldUseProductionAPI: Swift.Bool
  public var countryIsoAlpha2Code: Swift.String
  public enum SinglePhotoBoundingBoxesToShow {
    case rawBoundingBoxes
    case trackingBoxes
    public static func == (a: ProductRecognition.SDKConfiguration.SinglePhotoBoundingBoxesToShow, b: ProductRecognition.SDKConfiguration.SinglePhotoBoundingBoxesToShow) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public class ContoursExtractor {
  weak public var delegate: ProductRecognition.ContoursExtractorDelegate?
  public init(arSession: ARKit.ARSession, timeInterval: Foundation.TimeInterval)
  @objc deinit
}
public protocol ContoursExtractorDelegate : AnyObject {
  func contoursExtractor(frame: ARKit.ARFrame, contoursImage: UIKit.UIImage)
  func contoursExtractor(lastProcessingTime: Swift.UInt64)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ScanActivityViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var noResultText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var resultText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scanningText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scanningAnimationCompletion: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func showScanningAnimation(_ show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func showCustomMessage(_ text: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func showResultMessage(noResult: Swift.Bool = false, completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct ScanAgainConfiguration {
  public static var shared: ProductRecognition.ScanAgainConfiguration
  public var navigationBarColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderGap: CoreFoundation.CGFloat
  public var contentBackgroundColor: UIKit.UIColor
  public var hideBorder: Swift.Bool
  public var iconImage: UIKit.UIImage?
  public var iconTintColor: UIKit.UIColor
  public var text: Swift.String
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public init()
}
public struct Promo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension ProductRecognition.Promo : Swift.Equatable {
  public static func == (lhs: ProductRecognition.Promo, rhs: ProductRecognition.Promo) -> Swift.Bool
}
public class ProductsRepository {
  public init()
  public func getProductsInfo(products: [ProductRecognition.Products.Request.Product], completion: @escaping (_ productsResponse: ProductRecognition.Products.Response?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ResultListCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let cellHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var promo: ProductRecognition.Promo? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var product: ProductRecognition.ProductInfo? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentBackgroundView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var photoView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadProduct(_ product: ProductRecognition.ProductInfo, withPromotionAtIndex index: Swift.Int? = nil)
  @objc deinit
}
public struct ScanActivityConfiguration {
  public static var shared: ProductRecognition.ScanActivityConfiguration
  public var contentBackgroundColor: UIKit.UIColor
  public var font: UIKit.UIFont?
  public var noResultText: Swift.String
  public var resultText: Swift.String
  public var scanningText: Swift.String
  public var textColor: UIKit.UIColor
  public init()
}
extension ProductRecognition.SDKConfiguration.SinglePhotoBoundingBoxesToShow : Swift.Equatable {}
extension ProductRecognition.SDKConfiguration.SinglePhotoBoundingBoxesToShow : Swift.Hashable {}
